"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-quill-new";
exports.ids = ["vendor-chunks/react-quill-new"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-quill-new/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/react-quill-new/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Quill: () => (/* reexport safe */ quill__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var quill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! quill */ \"(ssr)/./node_modules/quill/quill.js\");\n/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\n\n\n\n\nclass ReactQuill extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(props) {\n        super(props);\n        this.editingAreaRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        /*\n        Changing one of these props should cause a full re-render and a\n        re-instantiation of the Quill editor.\n        */\n        this.dirtyProps = [\n            'modules',\n            'formats',\n            'bounds',\n            'theme',\n            'children',\n        ];\n        /*\n        Changing one of these props should cause a regular update. These are mostly\n        props that act on the container, rather than the quillized editing area.\n        */\n        this.cleanProps = [\n            'id',\n            'className',\n            'style',\n            'placeholder',\n            'tabIndex',\n            'onChange',\n            'onChangeSelection',\n            'onFocus',\n            'onBlur',\n            'onKeyPress',\n            'onKeyDown',\n            'onKeyUp',\n        ];\n        this.state = {\n            generation: 0,\n        };\n        /*\n        Tracks the internal selection of the Quill editor\n        */\n        this.selection = null;\n        this.onEditorChange = (eventName, rangeOrDelta, oldRangeOrDelta, source) => {\n            if (eventName === 'text-change') {\n                this.onEditorChangeText?.(this.editor.root.innerHTML, rangeOrDelta, source, this.unprivilegedEditor);\n            }\n            else if (eventName === 'selection-change') {\n                this.onEditorChangeSelection?.(rangeOrDelta, source, this.unprivilegedEditor);\n            }\n        };\n        const value = this.isControlled() ? props.value : props.defaultValue;\n        this.value = value ?? '';\n    }\n    validateProps(props) {\n        if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(props.children) > 1)\n            throw new Error('The Quill editing area can only be composed of a single React element.');\n        if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(props.children)) {\n            const child = react__WEBPACK_IMPORTED_MODULE_0__.Children.only(props.children);\n            if (child?.type === 'textarea')\n                throw new Error('Quill does not support editing on a <textarea>. Use a <div> instead.');\n        }\n        if (this.lastDeltaChangeSet &&\n            props.value === this.lastDeltaChangeSet)\n            throw new Error('You are passing the `delta` object from the `onChange` event back ' +\n                'as `value`. You most probably want `editor.getContents()` instead. ' +\n                'See: https://github.com/zenoamaro/react-quill#using-deltas');\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        this.validateProps(nextProps);\n        // If the editor hasn't been instantiated yet, or the component has been\n        // regenerated, we already know we should update.\n        if (!this.editor || this.state.generation !== nextState.generation) {\n            return true;\n        }\n        // Handle value changes in-place\n        if ('value' in nextProps) {\n            const prevContents = this.getEditorContents();\n            const nextContents = nextProps.value ?? '';\n            // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n            //       settle for a hybrid between controlled and uncontrolled mode. We\n            //       can't prevent the change, but we'll still override content\n            //       whenever `value` differs from current state.\n            // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n            //       change, regardless of whether they represent the same document.\n            if (!this.isEqualValue(nextContents, prevContents)) {\n                this.setEditorContents(this.editor, nextContents);\n            }\n        }\n        // Handle read-only changes in-place\n        if (nextProps.readOnly !== this.props.readOnly) {\n            this.setEditorReadOnly(this.editor, nextProps.readOnly);\n        }\n        // Clean and Dirty props require a render\n        return [...this.cleanProps, ...this.dirtyProps].some((prop) => {\n            return !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(nextProps[prop], this.props[prop]);\n        });\n    }\n    shouldComponentRegenerate(nextProps) {\n        // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n        return this.dirtyProps.some((prop) => {\n            return !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(nextProps[prop], this.props[prop]);\n        });\n    }\n    componentDidMount() {\n        this.instantiateEditor();\n        this.setEditorContents(this.editor, this.getEditorContents());\n    }\n    componentWillUnmount() {\n        this.destroyEditor();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n        // to be re-instantiated. Regenerating the editor will cause the whole tree,\n        // including the container, to be cleaned up and re-rendered from scratch.\n        // Store the contents so they can be restored later.\n        if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n            const delta = this.editor.getContents();\n            const selection = this.editor.getSelection();\n            this.regenerationSnapshot = { delta, selection };\n            this.setState({ generation: this.state.generation + 1 });\n            this.destroyEditor();\n        }\n        // The component has been regenerated, so it must be re-instantiated, and\n        // its content must be restored to the previous values from the snapshot.\n        if (this.state.generation !== prevState.generation) {\n            const { delta, selection } = this.regenerationSnapshot;\n            delete this.regenerationSnapshot;\n            this.instantiateEditor();\n            const editor = this.editor;\n            editor.setContents(delta);\n            postpone(() => this.setEditorSelection(editor, selection));\n        }\n    }\n    instantiateEditor() {\n        if (this.editor) {\n            this.hookEditor(this.editor);\n        }\n        else {\n            this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());\n        }\n    }\n    destroyEditor() {\n        if (!this.editor)\n            return;\n        this.unhookEditor(this.editor);\n    }\n    /*\n    We consider the component to be controlled if `value` is being sent in props.\n    */\n    isControlled() {\n        return 'value' in this.props;\n    }\n    getEditorConfig() {\n        return {\n            bounds: this.props.bounds,\n            formats: this.props.formats,\n            modules: this.props.modules,\n            placeholder: this.props.placeholder,\n            readOnly: this.props.readOnly,\n            tabIndex: this.props.tabIndex,\n            theme: this.props.theme,\n        };\n    }\n    getEditor() {\n        if (!this.editor)\n            throw new Error('Accessing non-instantiated editor');\n        return this.editor;\n    }\n    /**\n    Creates an editor on the given element. The editor will be passed the\n    configuration, have its events bound,\n    */\n    createEditor(element, config) {\n        const editor = new quill__WEBPACK_IMPORTED_MODULE_2__[\"default\"](element, config);\n        if (config.tabIndex != null) {\n            this.setEditorTabIndex(editor, config.tabIndex);\n        }\n        this.hookEditor(editor);\n        return editor;\n    }\n    hookEditor(editor) {\n        // Expose the editor on change events via a weaker, unprivileged proxy\n        // object that does not allow accidentally modifying editor state.\n        this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n        // Using `editor-change` allows picking up silent updates, like selection\n        // changes on typing.\n        editor.on('editor-change', this.onEditorChange);\n    }\n    unhookEditor(editor) {\n        editor.off('editor-change', this.onEditorChange);\n    }\n    getEditorContents() {\n        return this.value;\n    }\n    getEditorSelection() {\n        return this.selection;\n    }\n    /*\n    True if the value is a Delta instance or a Delta look-alike.\n    */\n    isDelta(value) {\n        return value && value.ops;\n    }\n    /*\n    Special comparison function that knows how to compare Deltas.\n    */\n    isEqualValue(value, nextValue) {\n        if (this.isDelta(value) && this.isDelta(nextValue)) {\n            return lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(value.ops, nextValue.ops);\n        }\n        else {\n            return lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(value, nextValue);\n        }\n    }\n    /*\n    Replace the contents of the editor, but keep the previous selection hanging\n    around so that the cursor won't move.\n    */\n    setEditorContents(editor, value) {\n        this.value = value;\n        const sel = this.getEditorSelection();\n        if (typeof value === 'string') {\n            editor.setContents(editor.clipboard.convert({ html: value }));\n        }\n        else {\n            editor.setContents(value);\n        }\n        postpone(() => this.setEditorSelection(editor, sel));\n    }\n    setEditorSelection(editor, range) {\n        this.selection = range;\n        if (range) {\n            // Validate bounds before applying.\n            const length = editor.getLength();\n            range.index = Math.max(0, Math.min(range.index, length - 1));\n            range.length = Math.max(0, Math.min(range.length, (length - 1) - range.index));\n            editor.setSelection(range);\n        }\n    }\n    setEditorTabIndex(editor, tabIndex) {\n        if (editor?.scroll?.domNode) {\n            editor.scroll.domNode.tabIndex = tabIndex;\n        }\n    }\n    setEditorReadOnly(editor, value) {\n        if (value) {\n            editor.disable();\n        }\n        else {\n            editor.enable();\n        }\n    }\n    /*\n    Returns a weaker, unprivileged proxy object that only exposes read-only\n    accessors found on the editor instance, without any state-modifying methods.\n    */\n    makeUnprivilegedEditor(editor) {\n        const e = editor;\n        return {\n            getHTML: () => e.root.innerHTML,\n            getSemanticHTML: e.getSemanticHTML.bind(e),\n            getLength: e.getLength.bind(e),\n            getText: e.getText.bind(e),\n            getContents: e.getContents.bind(e),\n            getSelection: e.getSelection.bind(e),\n            getBounds: e.getBounds.bind(e),\n        };\n    }\n    getEditingArea() {\n        const element = this.editingAreaRef.current;\n        if (!element) {\n            throw new Error('Cannot find element for editing area');\n        }\n        if (element.nodeType === 3) {\n            throw new Error('Editing area cannot be a text node');\n        }\n        return element;\n    }\n    /*\n    Renders an editor area, unless it has been provided one to clone.\n    */\n    renderEditingArea() {\n        const { children, preserveWhitespace } = this.props;\n        const { generation } = this.state;\n        const properties = {\n            key: generation,\n            ref: this.editingAreaRef,\n        };\n        if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(children)) {\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children), properties);\n        }\n        return preserveWhitespace ?\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pre\", { ...properties }) :\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ...properties });\n    }\n    render() {\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { id: this.props.id, style: this.props.style, key: this.state.generation, className: `quill ${this.props.className ?? ''}`, onKeyPress: this.props.onKeyPress, onKeyDown: this.props.onKeyDown, onKeyUp: this.props.onKeyUp }, this.renderEditingArea()));\n    }\n    onEditorChangeText(value, delta, source, editor) {\n        if (!this.editor)\n            return;\n        // We keep storing the same type of value as what the user gives us,\n        // so that value comparisons will be more stable and predictable.\n        const nextContents = this.isDelta(this.value)\n            ? editor.getContents()\n            : editor.getHTML();\n        if (nextContents !== this.getEditorContents()) {\n            // Taint this `delta` object, so we can recognize whether the user\n            // is trying to send it back as `value`, preventing a likely loop.\n            this.lastDeltaChangeSet = delta;\n            this.value = nextContents;\n            this.props.onChange?.(value, delta, source, editor);\n        }\n    }\n    onEditorChangeSelection(nextSelection, source, editor) {\n        if (!this.editor)\n            return;\n        const currentSelection = this.getEditorSelection();\n        const hasGainedFocus = !currentSelection && nextSelection;\n        const hasLostFocus = currentSelection && !nextSelection;\n        if (lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(nextSelection, currentSelection))\n            return;\n        this.selection = nextSelection;\n        this.props.onChangeSelection?.(nextSelection, source, editor);\n        if (hasGainedFocus) {\n            this.props.onFocus?.(nextSelection, source, editor);\n        }\n        else if (hasLostFocus) {\n            this.props.onBlur?.(currentSelection, source, editor);\n        }\n    }\n    focus() {\n        if (!this.editor)\n            return;\n        this.editor.focus();\n    }\n    blur() {\n        if (!this.editor)\n            return;\n        this.selection = null;\n        this.editor.blur();\n    }\n}\nReactQuill.displayName = 'React Quill';\n/*\nExport Quill to be able to call `register`\n*/\nReactQuill.Quill = quill__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\nReactQuill.defaultProps = {\n    theme: 'snow',\n    modules: {},\n    readOnly: false,\n};\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\nfunction postpone(fn) {\n    Promise.resolve().then(fn);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReactQuill);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-quill-new/lib/index.js\n");

/***/ })

};
;